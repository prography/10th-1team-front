name: CI/CD to Harbor & Prod Server

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: reviewmatch
      ENV_TAG: prod

    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Set version tag from commit
        run: |
          VERSION_TAG=sha-${GITHUB_SHA::7}
          echo "VERSION_TAG=$VERSION_TAG" >> $GITHUB_ENV

      - name: Create .env file
        run: |
          echo "NODE_ENV=production" > .env
          echo "NEXT_PUBLIC_BASE_URL=${{ secrets.NEXT_PUBLIC_BASE_URL }}" >> .env
          echo "NEXT_PUBLIC_KAKAO_MAP_API_KEY=${{ secrets.NEXT_PUBLIC_KAKAO_MAP_API_KEY }}" >> .env
          echo "KAKAO_REST_API_KEY=${{ secrets.KAKAO_REST_API_KEY }}" >> .env
          echo "KAKAO_REDIRECT_URI=${{ secrets.KAKAO_REDIRECT_URI }}" >> .env
          echo "NAVER_CLIENTID=${{ secrets.NAVER_CLIENTID }}" >> .env
          echo "NAVER_REDIRECT_URI=${{ secrets.NAVER_REDIRECT_URI }}" >> .env

      - name: Login to Harbor
        run: |
          echo "${{ secrets.HARBOR_PASSWORD }}" | docker login ${{ secrets.HARBOR_REGISTRY }} -u ${{ secrets.HARBOR_USER }} --password-stdin

      - name: Build and Push Docker image with version & prod tag
        run: |
          IMAGE=${{ secrets.HARBOR_REGISTRY }}/${{ secrets.HARBOR_PROJECT }}/$IMAGE_NAME
          docker build -t $IMAGE:$VERSION_TAG -t $IMAGE:$ENV_TAG .
          docker push $IMAGE:$VERSION_TAG
          docker push $IMAGE:$ENV_TAG

      - name: SSH Deploy - Pull and Run latest prod
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            export PATH=$PATH:/usr/bin:/usr/local/bin
            IMAGE_NAME=reviewmatch
            IMAGE=${{ secrets.HARBOR_REGISTRY }}/${{ secrets.HARBOR_PROJECT }}/$IMAGE_NAME

            echo "[0] 사용자 및 환경 확인"
            whoami
            which docker || echo "docker not found"
            echo $PATH

            echo "[1] Docker login"
            docker login ${{ secrets.HARBOR_REGISTRY }} -u ${{ secrets.HARBOR_USER }} -p ${{ secrets.HARBOR_PASSWORD }}

            echo "[2] Pull image"
            docker pull $IMAGE:prod

            echo "[3] Stop and remove old container"
            docker rm -f $IMAGE_NAME || true

            echo "[4] Run new container"
            docker run -d \
              --name $IMAGE_NAME \
              -p 8090:3000 \
              $IMAGE:prod
